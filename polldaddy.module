<?php
/**
 * @file
 * Provides configurable blocks of polldaddy polls.
 */

/**
 * Implements hook_menu().
 */
function polldaddy_menu() {
  $items['admin/structure/block/add-polldaddy'] = array(
    'title' => 'Add poll block',
    'description' => 'Add a new poll block.',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('polldaddy_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'polldaddy.admin.inc',
  );
  $items['admin/structure/block/delete-polldaddy'] = array(
    'title' => 'Delete poll block',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('polldaddy_delete'),
    'type' => MENU_CALLBACK,
    'file' => 'polldaddy.admin.inc',
  );
  $items['admin/settings/polldaddy'] = array(
    'title' => 'Polldaddy Settings',
    'description' => 'Configure Polldaddy.',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('polldaddy_admin_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'polldaddy.admin.inc',
  );
  $items['ajax/vote'] = array(
    'title' => 'AJAX: vote',
    'access callback' => TRUE,
    'page callback' => 'polldaddy_page_reload',
  );
  return $items;
}

function polldaddy_form_block_admin_display_form_alter(&$form, $form_state) {
  module_load_include('inc', 'polldaddy', 'polldaddy.admin');
  _polldaddy_form_block_admin_display_form_alter($form, $form_state);
}

/**
 * Implements hook_block_info().
 */
function polldaddy_block_info() {
  $blocks = array();
  foreach (variable_get('polldaddy_ids', array()) AS $delta) {
    $blocks[$delta]['info'] = _polldaddy_format_title(polldaddy_get_config($delta));
    // Menu blocks can't be cached because each menu item can have
    // a custom access callback. menu.inc manages its own caching.
    $blocks[$delta]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function polldaddy_block_configure($delta = NULL) {
  module_load_include('inc', 'polldaddy', 'polldaddy.admin');
  // Create a pseudo form state.
  $form_state = array('values' => polldaddy_get_config($delta));
  return polldaddy_configure_form($form_state);
}

/**
 * Implements hook_block_view().
 */
function polldaddy_block_view($delta = NULL) {
  $id = '.pane-polldaddy-'.$delta;

  $poll_id = variable_get("polldaddy_{$delta}_poll_id", 0);
  $use_style = variable_get("polldaddy_{$delta}_use_style", 0);

  $css = '';
  if(!$use_style){
      $css = "<style>
    {$id} .pds-question-top{  color: #F00 !important;}
    {$id} .pds-box {border: 0 none !important;width: auto !important;display: inline-block !important;}
    {$id} .pds-input-label {  width: auto !important;}
    {$id} .pds-answer{border: 0 none !important;padding: 0;}
    {$id} .pds-vote-button:hover {background-position: -47px -21px !important;}
    {$id} .pds-view-results:hover {background-position: -91px -21px !important;  }
    {$id} .pds-share{display: none !important;}
    {$id} .pds-pd-link{display: none !important;}
    {$id} .pds-links{display: inline !important;}
    {$id} .pds-return-poll:hover {background-position: -294px -21px !important;}
    {$id} .pds-answer-feedback{border: 0 none !important;}
    {$id} .pds-answer-feedback-bar {background: none repeat scroll 0 0 #EB1C21 !important;float: left;height: 10px !important;margin: 0 7px 2px 0;padding: 0;}
    {$id} .pds-answer-feedback{top: -19px;}
    {$id} .pds-feedback-label{top: 19px;}
    {$id} .pds-comments{display: none !important;}
    {$id} .PDS_Poll {text-align: center;}</style>
    ";
  }

  $block = array();
  $block['subject'] = '';
  $block['content'] = $css . polldaddy_poll_view($poll_id);
  return $block;
}

/**
 * Render a polldaddy poll.
 */
function polldaddy_poll_view($poll_id) {
  drupal_add_library('system', 'jquery.cookie');
  drupal_add_js(drupal_get_path('module', 'polldaddy') . '/js/track_votes.js');
  $output = '<script type="text/javascript" charset="utf-8" src="http://static.polldaddy.com/p/'.$poll_id.'.js"></script>';
  return $output;
}

/**
 * Implements hook_block_save().
 */
function polldaddy_block_save($delta, $edit) {
  variable_set("polldaddy_{$delta}_poll_id", $edit['poll_id']);
  variable_set("polldaddy_{$delta}_use_style", $edit['use_style']);
}

/**
 * Implements hook_field_formatter_info().
 */
function polldaddy_field_formatter_info() {
  return array(
    'polldaddy_pull' => array(
      'label' => t('Polldaddy Poll'),
      'field types' => array('text'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function polldaddy_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'polldaddy_pull':
      foreach ($items as $delta => $item) {
        $polldaddy_poll_id = $item['safe_value'];
        $element[$delta] = array(
          '#markup' => polldaddy_poll_view($polldaddy_poll_id),
        );
      }
      break;
  }
  return $element;
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param $delta
 *   string The delta that uniquely identifies the block in the block system. If
 *   not specified, the default configuration will be returned.
 * @return
 *   array An associated array of configuration options.
 */
function polldaddy_get_config($delta = NULL) {
  $config = array(
    'delta'       => $delta,
    'poll_id' => 0,
    'use_style' => '',
  );

  // Get the block configuration options.
  if ($delta) {
    $config['poll_id']  = variable_get("polldaddy_{$delta}_poll_id",  $config['poll_id']);
    $config['use_style']  = variable_get("polldaddy_{$delta}_use_style",  $config['use_style']);
  }

  return $config;
}

function polldaddy_page_reload(){
  $_SESSION['polldaddy']['voted'] = TRUE;
  return drupal_json(array('status' => 'ok'));
}

/**
 * Return the title of the block.
 *
 * @param $config
 *   array The configuration of the menu block.
 * @return
 *   string The title of the block.
 */
function _polldaddy_format_title($config) {
  module_load_include('php', 'polldaddy', 'polldaddy.api');

  // If an administrative title is specified, use it.
  $polls = polldaddy_get_polls();

  return 'Poll "'.$polls[$config['poll_id']].'"';
}

/**
 * Implementation of hook_ctools_plugin_directory().
 */
function polldaddy_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}
